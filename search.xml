<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>斐波那契数列</title>
      <link href="/2023/08/03/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
      <url>/2023/08/03/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自<a href="https://www.bilibili.com/read/cv20385060">https://www.bilibili.com/read/cv20385060</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/086fb419ee22c464e3ee74b6fc3fcbe35fbfa32b.jpg@1256w_1778h_!web-article-pic.avif" alt="图1"><br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/501ff509c6a4d5feefe058161a4fd69b3714c038.jpg@1256w_1778h_!web-article-pic.avif" alt="图2"><br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/fb2b3e9a6b2bb197a3af52c280daa86293fa6dbe.jpg@1256w_1778h_!web-article-pic.avif" alt="图3"><br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/00ed8250dce6ec4fddd42a6c75837e6dc1490edc.jpg@1256w_1778h_!web-article-pic.avif" alt="图4"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python笔记</title>
      <link href="/2023/07/31/python%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/31/python%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="记录一些python的语法"><a href="#记录一些python的语法" class="headerlink" title="记录一些python的语法"></a>记录一些python的语法</h1><blockquote><p>文章内部借用了一些小甲鱼的代码</p></blockquote><h2 id="python序列中enumerate和zip的一些用途"><a href="#python序列中enumerate和zip的一些用途" class="headerlink" title="python序列中enumerate和zip的一些用途"></a>python序列中enumerate和zip的一些用途</h2><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate()"></a>enumerate()</h3><p>enumerate()方法生成由二元组(二元组就是元素数量为2的元组)构成的一个迭代对象，每个二元组由可迭代参数的索引号及其对应的元素组成，举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&quot;Seiko&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">enumerate</span>(str1):</span><br><span class="line">        <span class="built_in">print</span>(each)</span><br><span class="line">(<span class="number">0</span>, <span class="string">&#x27;S&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;o&#x27;</span>)</span><br></pre></td></tr></table></figure><p>看完后可能我们会觉得这样的代码并没有什么用处，在实际开发中，<code>enumerate</code>和<code>zip</code>是Python中非常有用的内置函数，用于处理和操作迭代对象，特别是在循环和处理多个序列时。,下面举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子1: 获取元素和索引</span></span><br><span class="line">fruits = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> index, fruit <span class="keyword">in</span> <span class="built_in">enumerate</span>(fruits):</span><br><span class="line">    <span class="built_in">print</span>(index, fruit)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># 0 apple</span></span><br><span class="line"><span class="comment"># 1 banana</span></span><br><span class="line"><span class="comment"># 2 orange</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子2: 通过索引查找元素</span></span><br><span class="line">index_to_find = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> index, fruit <span class="keyword">in</span> <span class="built_in">enumerate</span>(fruits):</span><br><span class="line">    <span class="keyword">if</span> index == index_to_find:</span><br><span class="line">        <span class="built_in">print</span>(fruit)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># banana</span></span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h3><p>用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str1 = <span class="string">&quot;FishC&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">zip</span>(list1,str1):</span><br><span class="line">        <span class="built_in">print</span>(each)</span><br><span class="line">        </span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;h&#x27;</span>)</span><br><span class="line">(<span class="number">9</span>, <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple1 = (<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">zip</span>(list1,str1,tuple1):</span><br><span class="line">         <span class="built_in">print</span>(each)</span><br><span class="line">        </span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;i&#x27;</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;s&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;h&#x27;</span>, <span class="number">8</span>)</span><br><span class="line">(<span class="number">9</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><code>zip</code>函数用于将多个可迭代对象中的对应元素打包成元组，并返回一个迭代器。其用处包括但不限于：</p><ul><li><p>并行迭代：同时迭代多个列表或其他可迭代对象，将相应位置的元素组合在一起，方便同时处理多个序列。</p></li><li><p>数据转换：将多个列表中对应位置的元素进行合并，转换成新的数据结构。 示例：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子1: 并行迭代</span></span><br><span class="line">names = [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>]</span><br><span class="line">ages = [<span class="number">25</span>, <span class="number">30</span>, <span class="number">22</span>]</span><br><span class="line"><span class="keyword">for</span> name, age <span class="keyword">in</span> <span class="built_in">zip</span>(names, ages):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> is <span class="subst">&#123;age&#125;</span> years old.&quot;</span>)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># Alice is 25 years old.</span></span><br><span class="line"><span class="comment"># Bob is 30 years old.</span></span><br><span class="line"><span class="comment"># Charlie is 22 years old.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子2: 数据转换</span></span><br><span class="line">scores = [<span class="number">85</span>, <span class="number">90</span>, <span class="number">78</span>]</span><br><span class="line">grades = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">student_data = <span class="built_in">list</span>(<span class="built_in">zip</span>(names, ages, scores, grades))</span><br><span class="line"><span class="built_in">print</span>(student_data)</span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment"># [(&#x27;Alice&#x27;, 25, 85, &#x27;A&#x27;), (&#x27;Bob&#x27;, 30, 90, &#x27;A&#x27;), (&#x27;Charlie&#x27;, 22, 78, &#x27;B&#x27;)]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总的来说，<code>enumerate</code>和<code>zip</code>函数为开发者提供了方便的工具，使得处理和操作迭代对象更加简洁、高效。在遍历、索引查找、数据组合等场景中，它们经常被广泛使用。</p><h2 id="python操作符-in-和-not-in"><a href="#python操作符-in-和-not-in" class="headerlink" title="python操作符 in 和 not in"></a>python操作符 in 和 not in</h2><p>用于判断一个元素是否存在于一个列表（或者元组)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&quot;猫咪&quot;</span>,<span class="string">&quot;老虎&quot;</span>,<span class="string">&quot;狮子&quot;</span>,<span class="string">&quot;小狗&quot;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;猫咪&quot;</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;狐狸&quot;</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;狐狸&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> list1</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>通过以上原理我们可以通过这个语法来编写一段去重复代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">old_list = [<span class="string">&quot;猫咪&quot;</span>,<span class="string">&quot;老虎&quot;</span>,<span class="string">&quot;狮子&quot;</span>,<span class="string">&quot;小狗&quot;</span>,<span class="string">&quot;狮子&quot;</span>,<span class="string">&quot;小狗&quot;</span>] <span class="comment"># 老的列表里面有重复数据</span></span><br><span class="line">new_list = []                                        <span class="comment"># 初始化新列表</span></span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> old_list:</span><br><span class="line">    <span class="keyword">if</span> temp <span class="keyword">not</span> <span class="keyword">in</span> new_list:   <span class="comment"># 循环代码，每次对temp进行判断是否存在于新列表</span></span><br><span class="line">        new_list.append(temp)                        <span class="comment"># 不存在就将temp当前值添加入新列表</span></span><br><span class="line"><span class="built_in">print</span>(new_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果为 [&#x27;猫咪&#x27;, &#x27;老虎&#x27;, &#x27;狮子&#x27;, &#x27;小狗&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="del-语句"><a href="#del-语句" class="headerlink" title="del 语句"></a>del 语句</h2><p><code>del</code>语句是Python中的一个关键字，用于删除对象或对象的部分内容。它有多种用法，以下是<code>del</code>语句的全部用法：</p><ol><li><p>删除变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">del</span> x</span><br></pre></td></tr></table></figure></li><li><p>删除列表中的元素（通过索引）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">del</span> my_list[<span class="number">2</span>]  <span class="comment"># 删除索引为2的元素，结果：[1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p>删除列表切片（一次删除多个元素）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">del</span> my_list[<span class="number">1</span>:<span class="number">4</span>]  <span class="comment"># 删除索引从1到3的元素，结果：[1, 5]</span></span><br></pre></td></tr></table></figure></li><li><p>删除字典中的键值对：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">del</span> my_dict[<span class="string">&#x27;b&#x27;</span>]  <span class="comment"># 删除键为&#x27;b&#x27;的键值对，结果：&#123;&#x27;a&#x27;: 1, &#x27;c&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>删除对象的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = <span class="number">10</span></span><br><span class="line">        self.y = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">obj = MyClass()</span><br><span class="line"><span class="keyword">del</span> obj.x  <span class="comment"># 删除对象obj的属性x</span></span><br></pre></td></tr></table></figure></li><li><p>删除对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">del</span> my_list  <span class="comment"># 删除列表对象my_list本身</span></span><br></pre></td></tr></table></figure></li></ol><p>请注意，<code>del</code>语句是一个强制性操作，它会直接删除对象或其属性，无法恢复。在使用<code>del</code>时要小心，确保不会误删除关键数据或对象。另外，对于某些对象，<code>del</code>并不会立即释放其占用的内存，而是由垃圾回收机制负责在合适的时机回收释放。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表是Python中最常用的数据类型之一，它是一种有序、可变、允许重复元素的容器。列表的全部用法包括以下操作：</p><ol><li><p>创建列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty_list = []</span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p>访问列表元素（通过索引）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">0</span>])  <span class="comment"># 输出: 10</span></span><br></pre></td></tr></table></figure></li><li><p>切片操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 输出: [2, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p>修改列表元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_list = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]</span><br><span class="line">my_list[<span class="number">2</span>] = <span class="number">35</span></span><br><span class="line"><span class="built_in">print</span>(my_list)  <span class="comment"># 输出: [10, 20, 35, 40, 50]</span></span><br></pre></td></tr></table></figure></li><li><p>列表方法：</p><ul><li><code>append()</code>：在列表末尾添加元素</li><li><code>extend()</code>：将一个可迭代对象的元素添加到列表末尾</li><li><code>insert()</code>：在指定位置插入元素</li><li><code>remove()</code>：删除列表中指定元素的第一个匹配项</li><li><code>pop()</code>：移除并返回指定索引位置的元素</li><li><code>index()</code>：返回指定元素第一次出现的索引</li><li><code>count()</code>：统计指定元素在列表中出现的次数</li><li><code>sort()</code>：对列表进行排序</li><li><code>reverse()</code>：反转列表元素的顺序</li><li>…</li></ul></li><li><p>列表操作：</p><ul><li><code>len()</code>：返回列表的长度（元素个数）</li><li><code>+</code>：列表连接</li><li><code>*</code>：列表复制</li><li><code>in</code>：判断元素是否在列表中</li><li><code>not in</code>：判断元素是否不在列表中</li></ul></li><li><p>列表解析：<br>使用列表解析来生成新的列表，更加简洁高效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]  <span class="comment"># [1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure></li><li><p>嵌套列表：<br>列表中可以包含其他列表，形成多维列表或嵌套列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nested_list = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure></li><li><p>列表复制：<br>列表的复制可以通过切片或<code>copy()</code>方法实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">original_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">copied_list = original_list[:]  <span class="comment"># 或者使用 copied_list = original_list.copy()</span></span><br></pre></td></tr></table></figure></li></ol><p>总之，列表在Python中是一个非常常用的数据结构，具有广泛的用途和丰富的操作方法，它是处理和存储多个元素的重要工具。在实际开发中，列表常常被用于存储和处理各种数据集合。</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组是Python中另一个重要的数据类型，类似于列表，但是元组是不可变的，一旦创建后，其元素不能被修改。元组的全部用法包括以下操作：</p><ol><li><p>创建元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty_tuple = ()</span><br><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>访问元组元素（通过索引）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tuple[<span class="number">0</span>])  <span class="comment"># 输出: 10</span></span><br></pre></td></tr></table></figure></li><li><p>切片操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tuple[<span class="number">1</span>:<span class="number">4</span>])  <span class="comment"># 输出: (2, 3, 4)</span></span><br></pre></td></tr></table></figure></li><li><p>元组方法：</p><ul><li><code>count()</code>：统计指定元素在元组中出现的次数</li><li><code>index()</code>：返回指定元素第一次出现的索引</li></ul></li><li><p>元组操作：</p><ul><li><code>len()</code>：返回元组的长度（元素个数）</li><li><code>+</code>：元组连接</li><li><code>*</code>：元组复制</li><li><code>in</code>：判断元素是否在元组中</li><li><code>not in</code>：判断元素是否不在元组中</li></ul></li><li><p>解构元组（tuple unpacking）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br><span class="line">a, b, c = my_tuple</span><br><span class="line"><span class="built_in">print</span>(a, b, c)  <span class="comment"># 输出: 10 20 30</span></span><br></pre></td></tr></table></figure></li><li><p>嵌套元组：<br>元组中可以包含其他元组，形成多维元组或嵌套元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nested_tuple = ((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>))</span><br></pre></td></tr></table></figure></li><li><p>元组作为字典的键：<br>由于元组是不可变的，所以可以作为字典的键，而列表不能作为键。</p></li></ol><p>总之，元组是一种轻量级的数据结构，适用于存储一组数据，特别是那些不希望被修改的数据。由于元组是不可变的，所以在某些场景下，使用元组可以提供更安全的数据保护。在实际开发中，元组常常被用于表示固定的、不可更改的数据集合，比如日期、时间等。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是一段可重复使用的代码块，用于执行特定任务或计算，并可以接受输入并返回输出。在Python中，函数的定义使用<code>def</code>关键字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function_name</span>(<span class="params">parameters</span>):</span><br><span class="line">    <span class="comment"># Function body: code to be executed</span></span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><ul><li><code>function_name</code>: 函数名，遵循标识符命名规则，用于调用函数。</li><li><code>parameters</code>: 函数的输入，可以是0个或多个参数，用逗号分隔。</li><li><code>return</code>: 可选项，用于返回函数执行的结果。如果没有return语句，则函数返回None。</li></ul><h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">myFirstFunction</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是我创建的第一个函数&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>myFirstFunction()</span><br><span class="line"><span class="string">&#x27;这是我创建的第一个函数&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">mySecondFunction</span>(<span class="params">name</span>):     <span class="comment"># 参数为name</span></span><br><span class="line">        <span class="built_in">print</span>(name + <span class="string">&quot;是猫科动物。&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySecondFunction(<span class="string">&quot;老虎&quot;</span>)</span><br><span class="line">老虎是猫科动物。</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mySecondFunction(<span class="string">&quot;狮子&quot;</span>)</span><br><span class="line">狮子是猫科动物。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多参数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">       <span class="built_in">print</span> x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>多参数可以加非常的多，但是在开发中为了代码可读性建议数量不要太多</p><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>有些时候需要函数返回一些数据来报告执行的结果。若需要返回值只需要使用<code>return</code>关键字即可，后面跟着要指定返回的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">num1 ,num2</span>):</span><br><span class="line">        <span class="keyword">return</span> num1 + num2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">miaow</span>():</span><br><span class="line">       <span class="keyword">pass</span> <span class="comment"># pass是跳过语句，用于占位不执行</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;喵呜！&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>miaow()</span><br><span class="line"><span class="string">&#x27;喵呜！&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">divideby</span>(<span class="params">num1,num2</span>):</span><br><span class="line">        <span class="keyword">if</span> num2 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;除数不能为0&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> num1 / num2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divideby(<span class="number">3</span>,<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;除数不能为0&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>divideby(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="number">0.6</span></span><br></pre></td></tr></table></figure><p>Python可以不定义返回值，没用返回值就会返回None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(hello())</span><br><span class="line"><span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><p>如果返回了多个值则会以元组的形式打包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> , <span class="number">2</span> , <span class="string">&#x27;3&#x27;</span>, <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test()</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>,<span class="number">3.14</span>)</span><br></pre></td></tr></table></figure><p>在函数定义和函数调用中，有两个相关概念：形参（Parameters）和实参（Arguments）。它们用于在函数定义和函数调用之间传递数据。</p><h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><h4 id="形参（Parameters）"><a href="#形参（Parameters）" class="headerlink" title="形参（Parameters）"></a>形参（Parameters）</h4><p>形参是函数定义中用于接收输入值的变量。它们位于函数的括号内部，用于声明函数需要接收的输入数据。形参在函数内部被视为局部变量，并在函数执行期间被赋予实际传递的值。</p><p>在函数定义中，形参通常用来指定函数接受的数据类型和数量。这些形参在函数定义中可以有默认值，也可以没有。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>(<span class="params">parameter1, parameter2=<span class="number">10</span></span>):</span><br><span class="line">    <span class="comment"># 函数体使用形参 parameter1 和 parameter2</span></span><br><span class="line">    result = parameter1 + parameter2</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>parameter1</code> 和 <code>parameter2</code> 就是形参。<code>parameter1</code> 是必需的参数，而 <code>parameter2</code> 是带有默认值的参数。</p><h4 id="实参（Arguments）"><a href="#实参（Arguments）" class="headerlink" title="实参（Arguments）"></a>实参（Arguments）</h4><p>实参是函数调用时传递给函数的具体值。当你调用函数时，你需要传递实际的值作为实参，这些实参将被赋给函数定义中的对应形参。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用函数并传递实参</span></span><br><span class="line">result = my_function(<span class="number">5</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>在上述示例中，<code>5</code> 和 <code>20</code> 就是实参，它们分别被传递给函数 <code>my_function</code> 的 <code>parameter1</code> 和 <code>parameter2</code> 形参。</p><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>形参和实参是函数的桥梁，它们使得函数可以接受外部传递的数据，然后在函数内部进行操作。当你调用函数时，你必须提供与函数定义中形参所需的数量和类型相匹配的实参。实参会按照位置顺序对应到函数的形参上，或者通过关键字指定对应的形参。</p><p>下面是一些示例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数并传递实参</span></span><br><span class="line">result1 = add(<span class="number">3</span>, <span class="number">5</span>)          <span class="comment"># x=3, y=5</span></span><br><span class="line">result2 = add(x=<span class="number">10</span>, y=<span class="number">20</span>)    <span class="comment"># x=10, y=20</span></span><br><span class="line">result3 = add(y=<span class="number">7</span>, x=<span class="number">15</span>)     <span class="comment"># x=15, y=7 (通过关键字指定实参对应)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name, greeting=<span class="string">&quot;Hello&quot;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;greeting&#125;</span>, <span class="subst">&#123;name&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数并传递实参</span></span><br><span class="line">message1 = greet(<span class="string">&quot;Alice&quot;</span>)           <span class="comment"># name=&quot;Alice&quot;, greeting=&quot;Hello&quot; (使用默认值)</span></span><br><span class="line">message2 = greet(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Hi there&quot;</span>) <span class="comment"># name=&quot;Bob&quot;, greeting=&quot;Hi there&quot;</span></span><br><span class="line">message3 = greet(greeting=<span class="string">&quot;Hey&quot;</span>, name=<span class="string">&quot;Eve&quot;</span>) <span class="comment"># name=&quot;Eve&quot;, greeting=&quot;Hey&quot; (通过关键字指定实参对应)</span></span><br></pre></td></tr></table></figure><p>总结：形参在函数定义中声明函数需要接受的输入，而实参在函数调用时传递具体的值。形参和实参之间的数量和类型必须匹配，否则将导致错误。使用关键字参数可以更清晰地指定实参对应的形参，特别是在函数有多个参数时。</p><h3 id="函数文档"><a href="#函数文档" class="headerlink" title="函数文档"></a>函数文档</h3><p>函数文档（Function Documentation）是在函数定义中提供的用于描述函数目的、参数、返回值和使用方法的注释信息。它有助于其他开发者或你自己更好地理解函数的功能和使用方式，提供了对函数进行正确使用的指导。Python中使用字符串表示函数文档，通常称为”docstrings”（文档字符串）。</p><p>在函数定义的第一行，位于函数名称下方的三个引号或三个双引号之间，你可以编写函数文档。它可以包含多行，并且是可选项。通常，一个好的函数文档应该包含以下内容：</p><ol><li>函数的目的和功能：简要描述函数完成的任务。</li><li>参数说明：列出函数接受的所有参数，包括参数名称、类型和描述。</li><li>返回值说明：描述函数返回的结果，可能包括类型和意义。</li><li>使用示例：展示函数如何调用以及预期的输出。</li></ol><p>以下是一个示例函数及其函数文档的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This function adds two numbers and returns the sum.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Parameters:</span></span><br><span class="line"><span class="string">    x (int or float): The first number to be added.</span></span><br><span class="line"><span class="string">    y (int or float): The second number to be added.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">    int or float: The sum of x and y.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">result = add(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: 8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;可以看出文档并不会被打印出来，但它和注释#还是有一定的区别&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 下面我们输入</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(add.__doc__) <span class="comment"># 打印 函数名.__doc__ 这种格式就会展现出该函数我们编写的文档</span></span><br><span class="line">This function adds two numbers <span class="keyword">and</span> returns the <span class="built_in">sum</span>.</span><br><span class="line"></span><br><span class="line">Parameters:</span><br><span class="line">x (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">float</span>): The first number to be added.</span><br><span class="line">y (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">float</span>): The second number to be added.</span><br><span class="line"></span><br><span class="line">Returns:</span><br><span class="line"><span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">float</span>: The <span class="built_in">sum</span> of x <span class="keyword">and</span> y.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;可以使用`help()`函数来查看函数文档。在Python交互式解释器中，输入`help(function_name)`将显示函数文档。例如，`help(add)`将显示上面示例中的文档字符串。&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(add)</span><br><span class="line"></span><br><span class="line">Help on function add <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line">add(x, y)</span><br><span class="line">    This function adds two numbers <span class="keyword">and</span> returns the <span class="built_in">sum</span>.</span><br><span class="line">    </span><br><span class="line">    Parameters:</span><br><span class="line">    x (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">float</span>): The first number to be added.</span><br><span class="line">    y (<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">float</span>): The second number to be added.</span><br><span class="line">    </span><br><span class="line">    Returns:</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">float</span>: The <span class="built_in">sum</span> of x <span class="keyword">and</span> y.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>函数文档字符串的内容应该清晰明了，易于理解。</li><li>在函数文档中，使用冒号（:）来分隔参数名称和描述，使用换行符来分隔不同的参数和描述。</li><li>可以使用<code>help()</code>函数来查看函数文档。在Python交互式解释器中，输入<code>help(function_name)</code>将显示函数文档。例如，<code>help(add)</code>将显示上面示例中的文档字符串。</li></ul><p>编写函数文档是良好的编程实践，它有助于提高代码的可读性和可维护性。当你编写函数时，不妨加上适当的文档，这将使你的代码更具有可读性和协作性。</p><h3 id="关键字参数和默认参数"><a href="#关键字参数和默认参数" class="headerlink" title="关键字参数和默认参数"></a>关键字参数和默认参数</h3><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>在定义函数的时候，就已经把参数的名字和位置确定下来，Python中这类位置固定的参数成为位置参数。对于函数的调用者来说，只需要知道按照顺序传递正确的参数就可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">somebody, something</span>):</span><br><span class="line">        <span class="built_in">print</span>(somebody + <span class="string">&#x27;把&#x27;</span> + something + <span class="string">&#x27;吃了&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eat(<span class="string">&quot;小甲鱼&quot;</span>,<span class="string">&quot;蛋糕&quot;</span>)</span><br><span class="line">小甲鱼把蛋糕吃了</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eat(<span class="string">&quot;蛋糕&quot;</span>,<span class="string">&quot;小甲鱼&quot;</span>)</span><br><span class="line">蛋糕把小甲鱼吃了</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eat(something=<span class="string">&quot;蛋糕&quot;</span>,somebody=<span class="string">&quot;小甲鱼&quot;</span>)</span><br><span class="line">小甲鱼把蛋糕吃了</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关键字参数其实就是在传入实参时指定明确的形参变量名，其特点就是不存在先后顺序。多打几个字符尽量避免以后开发出现BUG</p><p>另外，在调用函数的时候，位置参数必须在关键字参数的前面，否则就会出错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>eat(something=<span class="string">&quot;蛋糕&quot;</span>,<span class="string">&quot;小甲鱼&quot;</span>)</span><br><span class="line">SyntaxError: positional argument follows keyword argument</span><br></pre></td></tr></table></figure><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>Python的函数允许位参数指定默认值，那么在函数调用的时候如果没用传递实参，则采用默认的参数值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">saySomething</span>(<span class="params">name=<span class="string">&quot;小甲鱼&quot;</span>,word=<span class="string">&quot;让编程改变世界&quot;</span></span>):</span><br><span class="line">        <span class="built_in">print</span>(name + <span class="string">&#x27;-&gt;&#x27;</span> + word)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>saySomething()</span><br><span class="line">小甲鱼-&gt;让编程改变世界</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>saySomething(<span class="string">&quot;李白&quot;</span>,<span class="string">&quot;君不见黄河之水天上来奔流到海不复回&quot;</span>)</span><br><span class="line">李白-&gt;君不见黄河之水天上来奔流到海不复回</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>saySomething(word=<span class="string">&quot;同是天涯沦落人，相逢何必曾相识&quot;</span>,name=<span class="string">&quot;白居易&quot;</span>)</span><br><span class="line">白居易-&gt;同是天涯沦落人，相逢何必曾相识</span><br></pre></td></tr></table></figure><p>可以看出默认参数让程序更加便捷，设计程序时应当设计一些默认项，方便用户直接使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">watchMovie</span>(<span class="params">name=<span class="string">&quot;小甲鱼&quot;</span>,cigarette=<span class="string">&quot;True&quot;</span>,beer=<span class="string">&quot;True&quot;</span>,girlfriend=<span class="string">&quot;true&quot;</span></span>):</span><br><span class="line">    sentence = name + <span class="string">&quot;带着&quot;</span></span><br><span class="line">    <span class="keyword">if</span> cigarette:</span><br><span class="line">        sentence = sentence + <span class="string">&quot;香烟&quot;</span></span><br><span class="line">    <span class="keyword">if</span> beer:</span><br><span class="line">        sentence = sentence + <span class="string">&quot;啤酒&quot;</span></span><br><span class="line">    <span class="keyword">if</span> girlfriend:</span><br><span class="line">        <span class="keyword">if</span> cigarette <span class="keyword">or</span> beer:</span><br><span class="line">            sentence = sentence + <span class="string">&quot;和女朋友&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sentence = sentence + <span class="string">&quot;女朋友&quot;</span></span><br><span class="line">    sentence = sentence + <span class="string">&quot;去看电影&quot;</span></span><br><span class="line">    <span class="keyword">return</span> sentence</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>watchMovie()</span><br><span class="line"><span class="string">&#x27;小甲鱼带着香烟啤酒和女朋友去看电影&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>watchMovie(name=<span class="string">&quot;不二&quot;</span>,girlfriend=<span class="literal">False</span>)</span><br><span class="line"><span class="string">&#x27;不二带着香烟啤酒去看电影&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="收集参数"><a href="#收集参数" class="headerlink" title="收集参数"></a>收集参数</h3><p>收集参数大多数时候也被称为可变参数，又是后我们不知道要调用多少参数，在定义函数的时候，形参就可以使用收集参数来”搞定“。语法简单，仅需要在参数前面加上”*”号即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">*paramas</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;有%d个参数&quot;</span> % <span class="built_in">len</span>(paramas))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第二个参数是&quot;</span> , paramas[<span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">有<span class="number">5</span>个参数</span><br><span class="line">第二个参数是 i</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="string">&quot;小甲鱼&quot;</span>,<span class="number">123</span>,<span class="number">3.14</span>)</span><br><span class="line">有<span class="number">3</span>个参数</span><br><span class="line">第二个参数是 <span class="number">123</span></span><br></pre></td></tr></table></figure><p>其实就是Python将收集来的参数打包成一个元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">*paramas</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(paramas))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test()</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;tuple&#x27;</span>&gt;        </span><br></pre></td></tr></table></figure><p>如果在收集参数后面还要指定其他参数，那么在调用函数的时候应该使用关键参数来指定，否则把实参都纳入到收集参数中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">*params,extra</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;收集参数是&quot;</span>,params)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;位置参数是&quot;</span>,extra)</span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#38&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">TypeError: test() missing <span class="number">1</span> required keyword-only argument: <span class="string">&#x27;extra&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, extra=<span class="number">5</span>)</span><br><span class="line">收集参数是 (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">位置参数是 <span class="number">5</span></span><br></pre></td></tr></table></figure><p>如果定义的函数中带有收集函数，那么可以将其他参数设置为默认参数，例如，print()的原型如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(*objects, sep=<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><code>print(*objects, sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout, flush=False)</code> 是Python中的内置函数<code>print()</code>的定义。下面是对这个函数的解释：</p><ul><li><code>print</code>: 是Python中用于输出内容到控制台的内置函数。</li><li><code>*objects</code>: 表示可变数量的位置参数。你可以传递任意数量的参数给<code>print()</code>函数，并它们会按照位置顺序打印在同一行上。如果没有传递任何参数，<code>print()</code>函数将只输出一个空行。</li><li><code>sep=&#39; &#39;</code>: 是指定分隔符的参数。它用于在每个被打印的对象之间插入一个字符串作为分隔符。默认情况下，分隔符是一个空格字符。</li><li><code>end=&#39;\n&#39;</code>: 是指定行结束符的参数。它用于在所有打印的对象之后插入一个字符串，表示一行的结束。默认情况下，行结束符是一个换行符（<code>\n</code>），因此每次调用<code>print()</code>后，都会换到新的一行。</li><li><code>file=sys.stdout</code>: 是指定输出文件的参数。它用于指定将打印的内容输出到哪个文件中。默认情况下，输出被定向到标准输出流（通常是屏幕），即<code>sys.stdout</code>。</li><li><code>flush=False</code>: 是控制输出缓冲的参数。如果设置为True，表示将强制刷新缓冲区，即立即输出。如果设置为False（默认值），则根据系统的行为，在合适的时机自动刷新输出缓冲。</li></ul><p>下面是一些使用<code>print()</code>函数的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)          <span class="comment"># 输出：Hello, World!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, sep=<span class="string">&quot;-&quot;</span>)          <span class="comment"># 输出：1-2-3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>, end=<span class="string">&quot; &quot;</span>)          <span class="comment"># 输出：Hello （注意：行结束符为一个空格而不是换行）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;World!&quot;</span>)                  <span class="comment"># 输出：World! （此处不换行）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Error message&quot;</span>, file=sys.stderr)  <span class="comment"># 将输出写入到标准错误流</span></span><br></pre></td></tr></table></figure><p><code>print()</code>函数是Python中常用的输出工具，用于在控制台显示信息。你可以通过调整参数来自定义输出格式，从而满足不同的打印需求。</p><p>在函数定义中，收集函数前面的型号<code>*</code>起到的作用称之为<code>打包</code>，通俗理解就是将多个参数打包成一个元组的形式进行储存。</p><p>但是<code>*</code>在实参中则起到<code>解包</code>作用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>num = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(num)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(*num)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p><code>解包</code>也适用于其他的序列类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = <span class="string">&quot;FishC&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(*name)</span><br><span class="line">F i s h C</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(*list1)</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>定义在函数内部的变量叫做局部变量，局部变量的作用范围旨在函数内部生效，它不能在函数外被引用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">discount</span>(<span class="params">price,rate</span>):</span><br><span class="line">    final_price = price * rate</span><br><span class="line">    <span class="keyword">return</span> final_price</span><br><span class="line"></span><br><span class="line">old_price = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入原价&quot;</span>))</span><br><span class="line">rate = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入则扣率&quot;</span>))</span><br><span class="line">new_price = discount(old_price,rate)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打折后的价格是: %.2f&quot;</span> % new_price)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line">请输入原价<span class="number">80</span></span><br><span class="line">请输入则扣率<span class="number">0.75</span></span><br><span class="line">打折后的价格是: <span class="number">60.00</span></span><br></pre></td></tr></table></figure><p>在discount函数中<code>price</code>，<code>rate</code>和<code>final_price</code>都是discount的局部变量</p><p>我们修改代码查看外部是否能访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">discount</span>(<span class="params">price,rate</span>):</span><br><span class="line">    final_price = price * rate</span><br><span class="line">    <span class="keyword">return</span> final_price</span><br><span class="line"></span><br><span class="line">old_price = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入原价&quot;</span>))</span><br><span class="line">rate = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入则扣率&quot;</span>))</span><br><span class="line">new_price = discount(old_price,rate)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打折后的价格是: %.2f&quot;</span> % new_price)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;试图在函数外部访问局部变量final_price的值 %0.2f&quot;</span> % final_price)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请输入原价<span class="number">80</span></span><br><span class="line">请输入则扣率<span class="number">0.75</span></span><br><span class="line">打折后的价格是: <span class="number">60.00</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/debian/Python/discount.py&quot;</span>, line <span class="number">9</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;试图在函数外部访问局部变量final_price的值 %0.2f&quot;</span> % final_price)</span><br><span class="line">NameError: name <span class="string">&#x27;final_price&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>全局变量拥有最大的作用域，所以可以在函数中访问到它</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">discount</span>(<span class="params">price,rate</span>):</span><br><span class="line">    final_price = price * rate</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;试图在函数内部访问全局变量old_price的值: %.2f&#x27;</span> % old_price)</span><br><span class="line">    <span class="keyword">return</span> final_price</span><br><span class="line"></span><br><span class="line">old_price = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入价格&quot;</span>))</span><br><span class="line">rate = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入折扣率&quot;</span>))</span><br><span class="line">new_price = discount(old_price,rate)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打折后的价格是:&quot;</span>,new_price)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入价格<span class="number">80</span></span><br><span class="line">请输入折扣率<span class="number">0.75</span></span><br><span class="line">试图在函数内部访问全局变量old_price的值: <span class="number">80.00</span></span><br><span class="line">打折后的价格是: <span class="number">60.0</span></span><br></pre></td></tr></table></figure><p>如果我们在函数内部修改了<code>old_price</code>我们来查看是全局变量是否会发生变化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">discount</span>(<span class="params">price,rate</span>):</span><br><span class="line">    final_price = price * rate</span><br><span class="line">    old_price = <span class="number">50</span> <span class="comment"># 在函数内部修改了全局变量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;访问在函数内部修改了的old_price的值: %.2f&#x27;</span> % old_price)</span><br><span class="line">    <span class="keyword">return</span> final_price</span><br><span class="line"></span><br><span class="line">old_price = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入价格&quot;</span>))</span><br><span class="line">rate = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入折扣率&quot;</span>))</span><br><span class="line">new_price = discount(old_price,rate)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;全局变量现在的值:&quot;</span>,old_price)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打折后的价格是:&quot;</span>,new_price)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请输入价格<span class="number">80</span></span><br><span class="line">请输入折扣率<span class="number">0.75</span></span><br><span class="line">访问在函数内部修改了的old_price的值: <span class="number">50.00</span></span><br><span class="line">全局变量现在的值: <span class="number">80.0</span></span><br><span class="line">打折后的价格是: <span class="number">60.0</span></span><br></pre></td></tr></table></figure><p>当函数内部试图修改全局变量，python会创建一个新的局部变量替代全局变量的值，但真正的全局变量并未修改</p><h3 id="内嵌函数"><a href="#内嵌函数" class="headerlink" title="内嵌函数"></a>内嵌函数</h3><p>Python的函数定义是支持嵌套的，也就是运行在函数中定义另一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;fun1正在被调用···&quot;</span>)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;fun2正在被调用···&quot;</span>)</span><br><span class="line">        fun2()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun1()   </span><br><span class="line"><span class="string">&#x27;fun1正在被调用···&#x27;</span></span><br><span class="line"><span class="string">&#x27;fun2正在被调用···&#x27;</span></span><br></pre></td></tr></table></figure><p>fun2在外部是无法调用的因为它是fun1函数内部的一个函数，无法在外部直接调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 尝试直接调用fun2()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun2()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#2&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    fun2()</span><br><span class="line">NameError: name <span class="string">&#x27;fun2&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>在内部函数中可以引用外部函数局部变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">        x = <span class="number">88</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">fun2</span>()</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">        fun2()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun1() </span><br><span class="line"><span class="number">88</span></span><br></pre></td></tr></table></figure><h3 id="LEGB原则"><a href="#LEGB原则" class="headerlink" title="LEGB原则"></a>LEGB原则</h3><p>那么现在有一个问题，如果有一个全局变量520 x&#x3D;520,fun2()函数内部有一个x &#x3D; 11 那么程序还会打88吗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">520</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">        x = <span class="number">88</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">            x = <span class="number">11</span></span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">        fun2()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fun1()   </span><br><span class="line"><span class="number">11</span>             <span class="comment"># 程序打印的是11</span></span><br></pre></td></tr></table></figure><p>每个x的id都不一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">520</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">id</span>(x))</span><br><span class="line"><span class="number">2353799139664</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">        x = <span class="number">88</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">id</span>(x))</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">            x = <span class="number">11</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">id</span>(x))</span><br><span class="line">        fun2()</span><br><span class="line"> &gt;&gt;&gt; fun1()</span><br><span class="line"><span class="number">2353759343696</span></span><br><span class="line"><span class="number">2353759152752</span></span><br><span class="line"><span class="comment"># 可以看出每个 x 的id都不相同</span></span><br></pre></td></tr></table></figure><p>LEGB原则是Python中用于解析变量作用域的规则。它指定了在查找和解析变量时的优先级顺序，依次是：Local（局部作用域）、Enclosing（嵌套作用域）、Global（全局作用域）和Built-in（内置作用域）。这个规则帮助我们理解在不同作用域中如何访问变量。</p><ul><li><strong>L（Local）局部作用域</strong>：局部作用域指的是函数内部的作用域。在函数内部定义的变量属于局部作用域，只能在函数内部访问。当函数被调用时，创建了局部作用域，函数执行完毕后，局部作用域被销毁。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>():</span><br><span class="line">    x = <span class="number">10</span>  <span class="comment"># 属于局部作用域的变量</span></span><br><span class="line">    <span class="built_in">print</span>(x)  <span class="comment"># 在函数内部可以访问</span></span><br><span class="line"></span><br><span class="line">my_function()</span><br><span class="line"><span class="comment"># print(x)  # 在函数外部访问会报错，因为x在局部作用域之外不可见</span></span><br></pre></td></tr></table></figure><ul><li><strong>E（Enclosing）嵌套作用域</strong>：嵌套作用域指的是包含在其他函数内部的函数作用域。当一个函数内部定义了另一个函数，内部函数可以访问外部函数中的变量，但外部函数不能访问内部函数的变量。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer_function</span>():</span><br><span class="line">    y = <span class="number">20</span>  <span class="comment"># 属于外部函数的变量</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_function</span>():</span><br><span class="line">        <span class="built_in">print</span>(y)  <span class="comment"># 在内部函数可以访问外部函数的变量</span></span><br><span class="line"></span><br><span class="line">    inner_function()</span><br><span class="line"></span><br><span class="line"><span class="comment"># inner_function()  # 在外部函数调用内部函数会报错，因为inner_function在外部函数之外不可见</span></span><br><span class="line">outer_function()</span><br></pre></td></tr></table></figure><ul><li><strong>G（Global）全局作用域</strong>：全局作用域指的是模块级别的作用域，在整个模块中定义的变量属于全局作用域，可以在模块中的任意位置访问。全局作用域在整个程序执行期间都是存在的。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">global_variable = <span class="number">30</span>  <span class="comment"># 属于全局作用域的变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_function</span>():</span><br><span class="line">    <span class="built_in">print</span>(global_variable)  <span class="comment"># 在函数内部可以访问全局作用域的变量</span></span><br><span class="line"></span><br><span class="line">my_function()</span><br><span class="line"><span class="built_in">print</span>(global_variable)  <span class="comment"># 在函数外部也可以访问全局作用域的变量</span></span><br></pre></td></tr></table></figure><ul><li><strong>B（Built-in）内置作用域</strong>：内置作用域指的是Python语言内置的函数和变量名，例如<code>print()</code>、<code>len()</code>等，它们在任何地方都可以直接使用，属于最高级别的作用域。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment"># len()是内置作用域的函数</span></span><br></pre></td></tr></table></figure><p>在解析变量时，Python遵循LEGB的优先级顺序。首先查找局部作用域，然后查找嵌套作用域，再查找全局作用域，最后查找内置作用域。如果在某个作用域中找到了变量，就不再继续向上查找。</p><p>理解LEGB原则有助于避免变量命名冲突和正确地访问不同作用域中的变量。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包（Closure）是指在一个函数内部定义的函数，并且该内部函数引用了外部函数的变量，使得外部函数的变量得以保留，即使外部函数的执行已经结束。闭包允许在函数之外访问外部函数内的变量，并保持这些变量的状态。</p><p>闭包的特点包括：</p><ol><li>在函数内部定义一个内部函数。</li><li>内部函数引用了外部函数的变量。</li><li>外部函数返回内部函数。</li></ol><p>闭包的使用场景：</p><ul><li>封装：可以将数据和操作封装在闭包中，实现类似对象的效果，但不需要使用类。</li><li>保持状态：闭包允许在函数调用之间保持数据状态，可以在多次调用函数时保持之前的状态。</li></ul><p>下面是一个使用闭包的简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">funX</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">funY</span>(<span class="params">y</span>):</span><br><span class="line">            <span class="keyword">return</span> x * y</span><br><span class="line">        <span class="keyword">return</span> funY</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp = funX(<span class="number">8</span>) <span class="comment"># 此时已经固定了x = 8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp(<span class="number">5</span>)        <span class="comment"># 因为x = 8 这个5会传入y作为y的赋值</span></span><br><span class="line"><span class="number">40</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer_function</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_function</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> inner_function</span><br><span class="line"></span><br><span class="line">closure_function = outer_function(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">result1 = closure_function(<span class="number">5</span>)  <span class="comment"># 外部函数的 x=10，内部函数的 y=5，结果为 10 + 5 = 15</span></span><br><span class="line">result2 = closure_function(<span class="number">8</span>)  <span class="comment"># 外部函数的 x=10，内部函数的 y=8，结果为 10 + 8 = 18</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述示例中，<code>outer_function</code>是外部函数，它返回了内部函数<code>inner_function</code>。内部函数<code>inner_function</code>引用了外部函数<code>outer_function</code>的变量<code>x</code>，这个变量在内部函数调用时保持了状态。当我们多次调用闭包函数<code>closure_function</code>时，内部函数可以保留之前<code>x</code>的值，实现了在多次调用之间保持状态的功能。</p><p>闭包是Python中一种强大的编程技巧，可以让我们在不使用全局变量或类的情况下实现更灵活和可维护的代码。但要小心使用闭包，确保正确地管理变量的状态，避免出现意外的行为。</p><p>在闭包中，外部函数的局部变量对应内部函数的局部变量，事实上相当于之前讲的全局变量与局部变量的对应关系，在内部函数中，只能对外部函数进行访问但不能修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">funX</span>():</span><br><span class="line">        x = <span class="number">5</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">funY</span>():</span><br><span class="line">            x = x + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">return</span> funY</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp = funX()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp()</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#9&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    temp()</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#6&gt;&quot;</span>, line <span class="number">4</span>, <span class="keyword">in</span> funY</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">UnboundLocalError: local variable <span class="string">&#x27;x&#x27;</span> referenced before assignment</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个错误显示与之前的全局变量时候基本一样，Python认为在内部函数的<code>x</code>是局部变量以后，外部函数<code>x</code>就被屏蔽起来了，所以执行 <code>x = x + 1</code> 的时候，在等号右边根本就找不到局部变量<code>x</code><br>可以使用nonlocal关键字高速Python这不是一个局部变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">funX</span>():</span><br><span class="line">        x = <span class="number">5</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">funY</span>():</span><br><span class="line">            <span class="keyword">nonlocal</span> x</span><br><span class="line">            x = x + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">return</span> funY</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp = funX()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp()</span><br><span class="line"><span class="number">6</span>       </span><br></pre></td></tr></table></figure><p>在实际开发中，闭包可以发挥多种作用，它是一种非常有用的编程技术。以下是闭包在实际开发中的一些常见应用：</p><ol><li><p><strong>封装数据和操作：</strong> 闭包可以用于创建类似于对象的结构，但比定义一个完整的类更简洁。它可以将数据和相关操作封装在一个闭包中，实现简单的数据封装和隐藏。</p></li><li><p><strong>保存状态：</strong> 闭包允许在函数调用之间保持数据状态。当一个函数需要记住之前的操作或状态时，闭包非常有用。这在处理需要持续追踪状态的场景中很有用，例如计数器、缓存等。</p></li><li><p><strong>回调函数：</strong> 在异步编程中，闭包常用作回调函数。它们可以用于传递函数给其他函数，以在异步操作完成时执行特定的操作。</p></li><li><p><strong>装饰器：</strong> 装饰器是一种使用闭包的常见用例。装饰器可以在不修改原始函数的情况下增加额外的功能。它允许我们在不更改函数定义的情况下对函数进行包装，实现日志记录、权限检查、性能分析等功能。</p></li><li><p><strong>工厂函数：</strong> 闭包可以用于创建工厂函数，用于动态创建函数或对象。这在需要根据不同的条件生成不同类型的对象时很有用。</p></li><li><p><strong>私有变量：</strong> Python没有提供私有变量的原生支持，但通过闭包，我们可以模拟私有变量，避免对外部不需要访问的变量进行直接访问。</p></li></ol><p>闭包的使用可以让代码更模块化、灵活，同时可以减少全局变量的使用，提高代码的可维护性和可读性。然而，过度使用闭包也可能会导致代码复杂化，因此在使用闭包时需要适度平衡。理解闭包的运作原理，可以帮助开发者更好地应用它，从而写出更高效、优雅的代码。</p><p>下面将给出几个具体的示例，展示闭包在实际开发中的应用：</p><h4 id="1-计数器闭包："><a href="#1-计数器闭包：" class="headerlink" title="1. 计数器闭包："></a>1. 计数器闭包：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">counter</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> increment</span><br><span class="line"></span><br><span class="line">counter1 = counter()</span><br><span class="line"><span class="built_in">print</span>(counter1())  <span class="comment"># 输出：1</span></span><br><span class="line"><span class="built_in">print</span>(counter1())  <span class="comment"># 输出：2</span></span><br><span class="line"><span class="built_in">print</span>(counter1())  <span class="comment"># 输出：3</span></span><br><span class="line"></span><br><span class="line">counter2 = counter()</span><br><span class="line"><span class="built_in">print</span>(counter2())  <span class="comment"># 输出：1 (独立的计数器)</span></span><br></pre></td></tr></table></figure><p>在这个示例中，<code>counter()</code>是一个工厂函数，它返回一个计数器闭包。每次调用<code>counter()</code>都会得到一个独立的计数器实例，它们之间互不影响，因为每个闭包都有自己的局部作用域。</p><h4 id="2-装饰器闭包："><a href="#2-装饰器闭包：" class="headerlink" title="2. 装饰器闭包："></a>2. 装饰器闭包：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log_decorator</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Calling function: <span class="subst">&#123;func.__name__&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@log_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="meta">@log_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subtract</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line"></span><br><span class="line">result1 = add(<span class="number">3</span>, <span class="number">5</span>)        <span class="comment"># 输出：Calling function: add</span></span><br><span class="line">                           <span class="comment">#      返回：8</span></span><br><span class="line"></span><br><span class="line">result2 = subtract(<span class="number">10</span>, <span class="number">2</span>)  <span class="comment"># 输出：Calling function: subtract</span></span><br><span class="line">                           <span class="comment">#      返回：8</span></span><br></pre></td></tr></table></figure><p>这个示例展示了装饰器的应用，<code>log_decorator</code>是一个闭包，它将额外的日志信息添加到被装饰的函数中，而不修改原始函数的定义。</p><h4 id="3-私有变量闭包："><a href="#3-私有变量闭包：" class="headerlink" title="3. 私有变量闭包："></a>3. 私有变量闭包：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">private_counter</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_count</span>():</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> increment, reset, get_count</span><br><span class="line"></span><br><span class="line">increment_fn, reset_fn, get_count_fn = private_counter()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(increment_fn())  <span class="comment"># 输出：1</span></span><br><span class="line"><span class="built_in">print</span>(increment_fn())  <span class="comment"># 输出：2</span></span><br><span class="line"><span class="built_in">print</span>(get_count_fn())  <span class="comment"># 输出：2</span></span><br><span class="line"></span><br><span class="line">reset_fn()</span><br><span class="line"><span class="built_in">print</span>(get_count_fn())  <span class="comment"># 输出：0</span></span><br></pre></td></tr></table></figure><p>在这个示例中，<code>private_counter()</code>是一个闭包，它返回了三个内部函数<code>increment</code>、<code>reset</code>和<code>get_count</code>。这些函数能够访问并修改外部函数<code>private_counter</code>的局部变量<code>count</code>，从而模拟了私有变量的效果。</p><p>这些示例展示了闭包在实际开发中的一些常见应用。闭包允许我们在函数内部保持状态，隐藏变量，实现装饰器，模拟私有变量等，从而让代码更简洁、灵活和可维护。</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>在Python中装饰器<code>decorator</code>的功能是将被装饰的函数当作参数传递给与装饰器对应的函数（名称相同的函数），并返回包装后的被装饰的函数</p><p>先定义一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">eat</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始吃了&quot;</span>)</span><br></pre></td></tr></table></figure><p>现在有一个需求，需要在执行该函数时加上日志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;开始调用eat()函数···&quot;</span>)</span><br><span class="line">开始调用eat()函数</span><br><span class="line">&gt;&gt;&gt;eat()</span><br><span class="line">开始吃了</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&quot;结束调用eat()函数···&quot;</span>)</span><br><span class="line">结束调用eat()函数···</span><br></pre></td></tr></table></figure><p>这一种代码会让代码变得臃肿起来</p><p>或者直接封装进函数中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">eat</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始调用eat()函数···&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始吃了&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;结束调用eat()函数···&quot;</span>)</span><br></pre></td></tr></table></figure><p>功能实现了但是问题是它需要侵入到原来的代码当中，使原来的代码业务逻辑变复杂，这样的代码也也不符合”一个函数只做一件事”的原则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;开始调用eat()函数···&quot;</span>)</span><br><span class="line">            func</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束调用eat()函数···&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">eat</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始吃了&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eat = log(eat)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eat()</span><br><span class="line">开始调用eat()函数···</span><br><span class="line">开始吃了</span><br><span class="line">结束调用eat()函数···</span><br></pre></td></tr></table></figure><p><code>log(eat)</code>将<code> eat</code>函数作为参数传递给<code>log()</code>,由于<code>wrapper()</code>是<code>log()</code>的闭包，所以它可以访问<code>log()</code>的局部变量<code>func</code>，也就是刚刚传递来的<code>eat</code>，因此，执行<code>func()</code>与执行<code>eat()</code>是一个效果。这样一来问题就解决了。不过<code>eat = log(eat)</code>看着别扭，可以通过<code>@语法糖</code>来解决问题。所谓语法糖<code>Syntactic sugar</code>，就是在计算机语言中添加的某种语法，这种语法对语言的功能没有任何影响，但是更方便程序员使用。</p><p>有了语法糖上面的代码可以这么写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始调用eat()函数···&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;结束调用eat()函数···&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始吃了&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eat()</span><br><span class="line">开始调用eat()函数···</span><br><span class="line">开始吃了</span><br><span class="line">结束调用eat()函数···</span><br></pre></td></tr></table></figure><p>如果eat()有参数只需要将参数扔给内部的wrapper()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">name</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;开始调用eat()函数···&quot;</span>)</span><br><span class="line">            func(name)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;结束调用eat()函数···&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @log</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s开始吃了&quot;</span> % name)</span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>eat(<span class="string">&quot;小甲鱼&quot;</span>)  </span><br><span class="line">开始调用eat()函数···</span><br><span class="line">小甲鱼开始吃了</span><br><span class="line">结束调用eat()函数···</span><br></pre></td></tr></table></figure><p>但是这样我们要时刻关注<code>eat()</code>参数的数量，如果修改了<code>eat()</code>,就必须一并修改装饰器<code>log()</code>不仅不方便也容易出错，防微杜渐，可以在设计的时候不让这种情况发生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*parama</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始调用eat()函数···&quot;</span>)</span><br><span class="line">        func(*parama)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;结束调用eat()函数···&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>最后如果觉得装饰不够可以一层套一层地增加装饰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@buffer</span></span><br><span class="line"><span class="meta">@performance</span></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s开始吃了&quot;</span> % name)</span><br></pre></td></tr></table></figure><p>调用eat()时，相当于调用buffer(performance(log(eat)))</p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>先定义一个普通函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">ds</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * x + <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ds(<span class="number">5</span>)    </span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p>如果使用<code>lambda</code>语句来定义这个函数，就会编程这样:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">lambda</span> x : <span class="number">2</span> * x + <span class="number">1</span></span><br><span class="line">&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x00000290DC54BEE0</span>&gt;</span><br></pre></td></tr></table></figure><p>匿名函数很大程度上简化可函数的定义过程。</p><p>Python 使用lambda关键字创建匿名函数</p><p>基本语法是使用冒号<code>:</code>分割函数的参数及返回值<code>:</code>号左边放置函数的参数，如果有多个参数，使用逗号<code>,</code>分割即可<code>:</code>冒号右边是函数的返回值</p><p> 执行完<code>lambda</code>语句后实际上返回一个函数对象，如果要对它进行调用，只需要给它绑定一个临时的名称即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = <span class="keyword">lambda</span> x : <span class="number">2</span> * x + <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g(<span class="number">5</span>)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><p>作为对比，这是普通函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>转换为<code>lambda</code>表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = <span class="keyword">lambda</span> x, y : x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>闭包函数也可以使用<code>lambda</code>表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">funX</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> y : x * y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp = funX(<span class="number">8</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>temp(<span class="number">5</span>)</span><br><span class="line"><span class="number">40</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p><code>filter</code>函数是一个过滤器，它的最用就是在海量的数据里面提取出有用的信息。</p><p><code>filter()</code>是Python的内置函数之一，它用于过滤一个可迭代对象中的元素，根据指定的函数（过滤条件）返回满足条件的元素。<code>filter()</code>函数接受两个参数：一个是函数（过滤条件），另一个是可迭代对象。</p><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">filter</span>(function, iterable)</span><br></pre></td></tr></table></figure><ul><li><code>function</code>: 过滤条件函数，用于对可迭代对象的每个元素进行判断。该函数必须返回一个布尔值（True或False），True表示保留该元素，False表示过滤掉该元素。</li><li><code>iterable</code>: 可迭代对象，可以是列表、元组、集合或其他可迭代容器。</li></ul><p><code>filter()</code>函数返回一个迭代器，其中包含满足过滤条件的元素。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_even</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> num % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">even_numbers = <span class="built_in">filter</span>(is_even, numbers)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(even_numbers))  <span class="comment"># 输出：[2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>is_even()</code>函数用于判断一个数是否为偶数。<code>filter(is_even, numbers)</code>将对<code>numbers</code>列表中的每个元素应用<code>is_even()</code>函数，保留所有返回True的元素（偶数），然后返回一个迭代器。最后，我们通过<code>list()</code>函数将迭代器转换为列表并打印结果。</p><p>使用<code>filter()</code>函数可以快速过滤出符合条件的元素，它非常适用于需要筛选数据的场景，尤其是处理大量数据时。</p><p>配合<code>lambda</code>表达式，可以用函数式编程来实现上面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x : x % <span class="number">2</span> == <span class="number">0</span>,<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)))</span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>在编程领域map一般作”映射”来解释。</p><p>map和filter()函数一样也有两个参数，仍然是一个函数和可迭代对象，将可迭代对象作为函数的参数进行运算加工，知道可迭代序列每个元素都会加工完毕。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x : x * <span class="number">2</span>,<span class="built_in">range</span>(<span class="number">10</span>)))</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure><p>map()的第二个参数是收集参数，支持多个可迭代对象，map()会从所有可迭代对象中一次取一个元组，然后将元组传递给func()。注意，如果可迭代对象的长度不一致，则以较短的迭代结束为止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x , y : x + y , [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>],[<span class="number">10</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">66</span>, <span class="number">88</span>]))</span><br><span class="line">[<span class="number">11</span>, <span class="number">32</span>, <span class="number">55</span>]</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">recursion</span>():</span><br><span class="line">        recursion()</span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>recursion()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#29&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    recursion()</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#28&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> recursion</span><br><span class="line">    recursion()</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#28&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> recursion</span><br><span class="line">    recursion()</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#28&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> recursion</span><br><span class="line">    recursion()</span><br><span class="line">  [Previous line repeated <span class="number">1022</span> more times]</span><br><span class="line">RecursionError: maximum recursion depth exceeded</span><br></pre></td></tr></table></figure><p>理论上讲这个程序将会一直执行下去直至耗尽所有的内存资源，才会停止下来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">10000</span>) <span class="comment"># 将递归深度限制设置为一万层</span></span><br></pre></td></tr></table></figure><h4 id="写一个求阶乘的函数"><a href="#写一个求阶乘的函数" class="headerlink" title="写一个求阶乘的函数"></a>写一个求阶乘的函数</h4><p>正整数的阶乘是指从1乘以2乘以3乘以4一直乘到所要求的数。假如所要求的数是5，则阶乘式是 1 × 2 × 3 × 4 × 5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非递归版本</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recursion</span>(<span class="params">n</span>):</span><br><span class="line">    result = n</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line">        result *= i</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个整数:&#x27;</span>))</span><br><span class="line">result = recursion(number)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d的阶乘是:%d&#x27;</span> % (number,result))</span><br></pre></td></tr></table></figure><p>程序实现结果如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line">请输入一个正整数:<span class="number">5</span></span><br><span class="line"><span class="number">5</span> 的阶乘是: <span class="number">120</span></span><br></pre></td></tr></table></figure><p>下面来写递归版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个整数&#x27;</span>))</span><br><span class="line">result = factorial(number)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d的阶乘是: %d&quot;</span> % (number, result))</span><br></pre></td></tr></table></figure><p>实现的结果是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;</span><br><span class="line">请输入一个正整数:<span class="number">5</span></span><br><span class="line"><span class="number">5</span> 的阶乘是: <span class="number">120</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aria2 + Rclone + Onedrive离线下载</title>
      <link href="/2023/07/03/aria2/"/>
      <url>/2023/07/03/aria2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇仅讲解Linux系统中的配置，服务器配置推荐为大容量VPS，便于下载大型文件。</p></blockquote><h1 id="Aria2-reclone-Onedrive-自动上传挂载Onedrive"><a href="#Aria2-reclone-Onedrive-自动上传挂载Onedrive" class="headerlink" title="Aria2 + reclone + Onedrive 自动上传挂载Onedrive"></a>Aria2 + reclone + Onedrive 自动上传挂载Onedrive</h1><h2 id="Aria2"><a href="#Aria2" class="headerlink" title="Aria2"></a>Aria2</h2><p>Aria2 Aria2是一款功能强大的开源下载管理工具，它支持多种协议和下载方式，并具有高度可配置性。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装aria2"><a href="#安装aria2" class="headerlink" title="安装aria2"></a>安装aria2</h4><p>首先SSH连接VPS服务器或其他途径连接服务器<br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/6e514f9c4c321111.png" alt="SSH连接"><br>这里使用Aria2一键增强脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N git.io/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; ./aria2.sh #采用P3TERX ZONE脚本</span><br></pre></td></tr></table></figure><p>作者GitHub地址 <a href="https://github.com/P3TERX/aria2.sh">https://github.com/P3TERX/aria2.sh</a><br>出现脚本操作菜单输入 1 开始安装。<br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/0c3020a0f7d9ff5f.png" alt="安装aria2"><br>安装成功后会出现AriaNG链接<br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/4206cdbcb0951a8f.png" alt="AriaNG"><br>在浏览器中输入AriaNG链接，进入AriaNG控制面板<br>当浏览器中出现Aria2 状态为已链接为配置成功<br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/0ef1d8cf1c88a1ea.png" alt="AriaNG链接"></p><h2 id="Rclone-配置"><a href="#Rclone-配置" class="headerlink" title="Rclone 配置"></a>Rclone 配置</h2><blockquote><p>rclone配置需要搭配自己的电脑(没MAC电脑只能windows系统演示)使用<br>打开rclone官网 <a href="https://rclone.org/downloads/">https://rclone.org/downloads/</a><br>从rclone官网上选择符合你的电脑架构的安装包<br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230704231212.png" alt="rclone"></p></blockquote><h2 id="获取-token"><a href="#获取-token" class="headerlink" title="获取 token"></a>获取 token</h2><p>在本地 Win­dows 电脑上下载 rclone，然后解压出来，解压后进入文件夹，<br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230705115135.png" alt="cmd"><br>在资源管理器地址栏输入 cmd，回车就会在当前路径打开命令提示符。<br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230705115403.png" alt="资源管理器"><br><strong>win10</strong>或者<strong>win11</strong>可摁住 <strong>Shift</strong> 并右键打开终端<br>输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\rclone authorize <span class="string">&quot;onedrive&quot;</span></span><br></pre></td></tr></table></figure><p> 获取onedrive Token<br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230705120707.png" alt="cmd"><br>接下来会弹出浏览器，要求你登录账号进行授权。<br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230705120943.png" alt="认证"><br>当提示Success!时 命令提示符窗口会出现以下信息：</p><p><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230705121255.png" alt="命令提示符窗口"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">If your browser doesn<span class="string">&#x27;t open automatically go to the following link: http://127.0.0.1:53682/auth</span></span><br><span class="line"><span class="string">Log in and authorize rclone for access</span></span><br><span class="line"><span class="string">Waiting for code...</span></span><br><span class="line"><span class="string">Got code</span></span><br><span class="line"><span class="string">Paste the following into your remote machine ---&gt;</span></span><br><span class="line"><span class="string">&#123;&quot;access_token&quot;:&quot;xxxxxxxx&quot;&#125;  # 复制&#123;&quot;access_token&quot;:&quot;xxxxxxxx&quot;&#125;整个内容，并保存好，后面需要用到 中括号也记得复制上！！！！！！！！</span></span><br><span class="line"><span class="string">&lt;---End paste</span></span><br></pre></td></tr></table></figure><p>下面登录自己的VPS输入以下指令安装Rclone</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://rclone.org/install.sh | sudo bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230705121753.png" alt="安装完毕"></p><p>下面开始配置Rclone<br>输入 <code>rclone config</code> 命令，会出现以下信息，参照下面的注释进行操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line">root@SEIKO2:~# rclone config</span><br><span class="line">No remotes found, make a new one?</span><br><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line"><span class="meta prompt_">n/s/q&gt; </span><span class="language-bash">n <span class="comment">#选择n 添加</span></span></span><br><span class="line"></span><br><span class="line">Enter name for new remote.</span><br><span class="line"><span class="meta prompt_">name&gt; </span><span class="language-bash">OneDrive <span class="comment">#输入 OneDrive 建议复制不要打错</span></span></span><br><span class="line"></span><br><span class="line">Option Storage.</span><br><span class="line">Type of storage to configure.</span><br><span class="line">Choose a number from below, or type in your own value.</span><br><span class="line"> 1 / 1Fichier</span><br><span class="line">   \ (fichier)</span><br><span class="line"> 2 / Akamai NetStorage</span><br><span class="line">   \ (netstorage)</span><br><span class="line"> 3 / Alias for an existing remote</span><br><span class="line">   \ (alias)</span><br><span class="line"> 4 / Amazon Drive</span><br><span class="line">   \ (amazon cloud drive)</span><br><span class="line"> 5 / Amazon S3 Compliant Storage Providers including AWS, Alibaba, ArvanCloud, Ceph, China Mobile, Cloudflare, GCS, DigitalOcean, Dreamhost, Huawei OBS, IBM COS, IDrive e2, IONOS Cloud, Liara, Lyve Cloud, Minio, Netease, Petabox, RackCorp, Scaleway, SeaweedFS, StackPath, Storj, Tencent COS, Qiniu and Wasabi</span><br><span class="line">   \ (s3)</span><br><span class="line"> 6 / Backblaze B2</span><br><span class="line">   \ (b2)</span><br><span class="line"> 7 / Better checksums for other remotes</span><br><span class="line">   \ (hasher)</span><br><span class="line"> 8 / Box</span><br><span class="line">   \ (box)</span><br><span class="line"> 9 / Cache a remote</span><br><span class="line">   \ (cache)</span><br><span class="line">10 / Citrix Sharefile</span><br><span class="line">   \ (sharefile)</span><br><span class="line">11 / Combine several remotes into one</span><br><span class="line">   \ (combine)</span><br><span class="line">12 / Compress a remote</span><br><span class="line">   \ (compress)</span><br><span class="line">13 / Dropbox</span><br><span class="line">   \ (dropbox)</span><br><span class="line">14 / Encrypt/Decrypt a remote</span><br><span class="line">   \ (crypt)</span><br><span class="line">15 / Enterprise File Fabric</span><br><span class="line">   \ (filefabric)</span><br><span class="line">16 / FTP</span><br><span class="line">   \ (ftp)</span><br><span class="line">17 / Google Cloud Storage (this is not Google Drive)</span><br><span class="line">   \ (google cloud storage)</span><br><span class="line">18 / Google Drive</span><br><span class="line">   \ (drive)</span><br><span class="line">19 / Google Photos</span><br><span class="line">   \ (google photos)</span><br><span class="line">20 / HTTP</span><br><span class="line">   \ (http)</span><br><span class="line">21 / Hadoop distributed file system</span><br><span class="line">   \ (hdfs)</span><br><span class="line">22 / HiDrive</span><br><span class="line">   \ (hidrive)</span><br><span class="line">23 / In memory object storage system.</span><br><span class="line">   \ (memory)</span><br><span class="line">24 / Internet Archive</span><br><span class="line">   \ (internetarchive)</span><br><span class="line">25 / Jottacloud</span><br><span class="line">   \ (jottacloud)</span><br><span class="line">26 / Koofr, Digi Storage and other Koofr-compatible storage providers</span><br><span class="line">   \ (koofr)</span><br><span class="line">27 / Local Disk</span><br><span class="line">   \ (local)</span><br><span class="line">28 / Mail.ru Cloud</span><br><span class="line">   \ (mailru)</span><br><span class="line">29 / Mega</span><br><span class="line">   \ (mega)</span><br><span class="line">30 / Microsoft Azure Blob Storage</span><br><span class="line">   \ (azureblob)</span><br><span class="line">31 / Microsoft OneDrive</span><br><span class="line">   \ (onedrive)</span><br><span class="line">32 / OpenDrive</span><br><span class="line">   \ (opendrive)</span><br><span class="line">33 / OpenStack Swift (Rackspace Cloud Files, Blomp Cloud Storage, Memset Memstore, OVH)</span><br><span class="line">   \ (swift)</span><br><span class="line">34 / Oracle Cloud Infrastructure Object Storage</span><br><span class="line">   \ (oracleobjectstorage)</span><br><span class="line">35 / Pcloud</span><br><span class="line">   \ (pcloud)</span><br><span class="line">36 / PikPak</span><br><span class="line">   \ (pikpak)</span><br><span class="line">37 / Put.io</span><br><span class="line">   \ (putio)</span><br><span class="line">38 / QingCloud Object Storage</span><br><span class="line">   \ (qingstor)</span><br><span class="line">39 / SMB / CIFS</span><br><span class="line">   \ (smb)</span><br><span class="line">40 / SSH/SFTP</span><br><span class="line">   \ (sftp)</span><br><span class="line">41 / Sia Decentralized Cloud</span><br><span class="line">   \ (sia)</span><br><span class="line">42 / Storj Decentralized Cloud Storage</span><br><span class="line">   \ (storj)</span><br><span class="line">43 / Sugarsync</span><br><span class="line">   \ (sugarsync)</span><br><span class="line">44 / Transparently chunk/split large files</span><br><span class="line">   \ (chunker)</span><br><span class="line">45 / Union merges the contents of several upstream fs</span><br><span class="line">   \ (union)</span><br><span class="line">46 / Uptobox</span><br><span class="line">   \ (uptobox)</span><br><span class="line">47 / WebDAV</span><br><span class="line">   \ (webdav)</span><br><span class="line">48 / Yandex Disk</span><br><span class="line">   \ (yandex)</span><br><span class="line">49 / Zoho</span><br><span class="line">   \ (zoho)</span><br><span class="line">50 / premiumize.me</span><br><span class="line">   \ (premiumizeme)</span><br><span class="line">51 / seafile</span><br><span class="line">   \ (seafile)</span><br><span class="line"><span class="meta prompt_">Storage&gt; </span><span class="language-bash">31 <span class="comment">#选择 31 Microsoft OneDrive</span></span></span><br><span class="line"></span><br><span class="line">Option client_id. </span><br><span class="line">OAuth Client Id.  </span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a value. Press Enter to leave empty.</span><br><span class="line"><span class="meta prompt_">client_id&gt; </span><span class="language-bash"> <span class="comment"># 在这里直接回车</span></span></span><br><span class="line"></span><br><span class="line">Option client_secret.</span><br><span class="line">OAuth Client Secret.</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a value. Press Enter to leave empty.</span><br><span class="line"><span class="meta prompt_">client_secret&gt; </span><span class="language-bash"> <span class="comment">#在这里直接回车</span></span></span><br><span class="line"></span><br><span class="line">Option region.</span><br><span class="line">Choose national cloud region for OneDrive.</span><br><span class="line">Choose a number from below, or type in your own string value.</span><br><span class="line">Press Enter for the default (global).</span><br><span class="line"> 1 / Microsoft Cloud Global</span><br><span class="line">   \ (global)</span><br><span class="line"> 2 / Microsoft Cloud for US Government</span><br><span class="line">   \ (us)</span><br><span class="line"> 3 / Microsoft Cloud Germany</span><br><span class="line">   \ (de)</span><br><span class="line"> 4 / Azure and Office 365 operated by Vnet Group in China</span><br><span class="line">   \ (cn)</span><br><span class="line"><span class="meta prompt_">region&gt; </span><span class="language-bash">1 <span class="comment"># 选择1</span></span></span><br><span class="line"></span><br><span class="line">Edit advanced config?</span><br><span class="line">y) Yes</span><br><span class="line">n) No (default)</span><br><span class="line"><span class="meta prompt_">y/n&gt; </span><span class="language-bash">n <span class="comment"># 选择n</span></span> </span><br><span class="line"></span><br><span class="line">Use web browser to automatically authenticate rclone with remote?</span><br><span class="line"> * Say Y if the machine running rclone has a web browser you can use</span><br><span class="line"> * Say N if running rclone on a (remote) machine without web browser access</span><br><span class="line">If not sure try Y. If Y failed, try N.</span><br><span class="line"></span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line"><span class="meta prompt_">y/n&gt; </span><span class="language-bash">n <span class="comment"># 选择n</span></span> </span><br><span class="line"></span><br><span class="line">Option config_token.</span><br><span class="line">For this to work, you will need rclone available on a machine that has</span><br><span class="line">a web browser available.</span><br><span class="line">For more help and alternate methods see: https://rclone.org/remote_setup/</span><br><span class="line">Execute the following on the machine with the web browser (same rclone</span><br><span class="line">version recommended):</span><br><span class="line">rclone authorize &quot;onedrive&quot;</span><br><span class="line">Then paste the result.</span><br><span class="line">Enter a value.</span><br><span class="line"><span class="meta prompt_">config_token&gt; </span><span class="language-bash">&#123;<span class="string">&quot;access_token&quot;</span>:<span class="string">&quot;&quot;</span>&#125; <span class="comment"># 在这里输入之前获取到的TOKEN不要输错</span></span></span><br><span class="line"></span><br><span class="line">Option config_type.</span><br><span class="line">Type of connection</span><br><span class="line">Choose a number from below, or type in an existing string value.</span><br><span class="line">Press Enter for the default (onedrive).</span><br><span class="line"> 1 / OneDrive Personal or Business</span><br><span class="line">   \ (onedrive)</span><br><span class="line"> 2 / Root Sharepoint site</span><br><span class="line">   \ (sharepoint)</span><br><span class="line">   / Sharepoint site name or URL</span><br><span class="line"> 3 | E.g. mysite or https://contoso.sharepoint.com/sites/mysite</span><br><span class="line">   \ (url)</span><br><span class="line"> 4 / Search for a Sharepoint site</span><br><span class="line">   \ (search)</span><br><span class="line"> 5 / Type in driveID (advanced)</span><br><span class="line">   \ (driveid)</span><br><span class="line"> 6 / Type in SiteID (advanced)</span><br><span class="line">   \ (siteid)</span><br><span class="line">   / Sharepoint server-relative path (advanced)</span><br><span class="line"> 7 | E.g. /teams/hr</span><br><span class="line">   \ (path)</span><br><span class="line"><span class="meta prompt_">config_type&gt; </span><span class="language-bash">1 <span class="comment"># 这里选择 1</span></span></span><br><span class="line"></span><br><span class="line">Option config_driveid.</span><br><span class="line">Select drive you want to use</span><br><span class="line">Choose a number from below, or type in your own string value.</span><br><span class="line">Press Enter for the default (b!wbkakGngxUCkQ6Di79whRqfshnhLw6BCs2MFJYo3OOofXUbqiJ4qRaxjZoeAulkw).</span><br><span class="line"> 1 / OneDrive (business)</span><br><span class="line">   \ (b!wbkakGngxUCkQ6Di79whRqfshnhLw6BCs2MFJYo3OOofXUbqiJ4qRaxjZoeAulkw)</span><br><span class="line"><span class="meta prompt_">config_driveid&gt; </span><span class="language-bash">1 <span class="comment"># 选择 1</span></span></span><br><span class="line"></span><br><span class="line">Drive OK?</span><br><span class="line"></span><br><span class="line">Found drive &quot;root&quot; of type &quot;business&quot;</span><br><span class="line">URL: https://6368rs-my.sharepoint.com/personal/seiko_6368rs_onmicrosoft_com/Documents</span><br><span class="line"></span><br><span class="line">y) Yes (default)</span><br><span class="line">n) No</span><br><span class="line"><span class="meta prompt_">y/n&gt; </span><span class="language-bash">y <span class="comment"># 选择 y</span></span></span><br><span class="line"></span><br><span class="line">Configuration complete.</span><br><span class="line">Options:</span><br><span class="line">- type: onedrive</span><br><span class="line">- token: &#123;&quot;access_token&quot;:&quot;&quot;&#125;</span><br><span class="line">- drive_id: b!wbkakGngxUCkQ6Di79whRqfshnhLw6BCs2MFJYo3OOofXUbqiJ4qRaxjZoeAulkw</span><br><span class="line">- drive_type: business</span><br><span class="line">Keep this &quot;OneDrive&quot; remote?</span><br><span class="line">y) Yes this is OK (default)</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line"><span class="meta prompt_">y/e/d&gt; </span><span class="language-bash">y <span class="comment"># 选择 y</span></span></span><br><span class="line"></span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">OneDrive             onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line"><span class="meta prompt_">e/n/d/r/c/s/q&gt; </span><span class="language-bash">q <span class="comment"># 输入 q 退出</span></span></span><br></pre></td></tr></table></figure><h2 id="配置自动上传脚本"><a href="#配置自动上传脚本" class="headerlink" title="配置自动上传脚本"></a>配置自动上传脚本</h2><p>输入nano &#x2F;root&#x2F;.aria2c&#x2F;aria2.conf打开 Aria2 配置文件进行修改。或使用Aria2 一键安装管理脚本 增强版中的手动修改选项打开配置文件进行修改。找到“下载完成后执行的命令”，把clean.sh替换为upload.sh。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载完成后执行的命令</span></span><br><span class="line">on-download-complete=/root/.aria2c/upload.sh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230705152314.png" alt="upload"><br>重启 Aria2 。脚本选项重启或者执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service aria2 restart</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230705152425.png" alt="重启"></p><h2 id="检查配置是否生效"><a href="#检查配置是否生效" class="headerlink" title="检查配置是否生效"></a>检查配置是否生效</h2><p>执行upload.sh脚本，提示success即代上传脚本能正常被调用，否则请检查与 RCLONE 有关的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/.aria2c/upload.sh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230705152459.png" alt="图"></p><h2 id="使用AriaNG-面板"><a href="#使用AriaNG-面板" class="headerlink" title="使用AriaNG 面板"></a>使用AriaNG 面板</h2><p>之前通过脚本安装Aria2,通过里面的AriaNG链接打开面板<br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/4206cdbcb0951a8f.png" alt="aria2"><br>在面板里面点击新建然后输入下载链接，下载完毕后会自动上传，上传完毕会自动删除vps中已上传文件。<br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230705152544.png" alt="上传"></p><h2 id="纯Ipv6-aria2如何连接"><a href="#纯Ipv6-aria2如何连接" class="headerlink" title="纯Ipv6 aria2如何连接"></a>纯Ipv6 aria2如何连接</h2><p>aria2默认是禁用ipv6的,我们需要修改aria2的配置文件aria2.conf来开启ipv6的支持.<br>将<code>disable-ipv6=false</code>修改为<br><code>disable-ipv6=false</code><br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230707191801.png" alt="解除ipv6禁用"></p><p>接下来在AriaNG面板中AriaNG设置里面的ip地址改为[你的ipv6地址]协议可选择http和ws。<br><img src="https://cdn.jsdelivr.net/gh/Seikoblog/IMG/20230707192120.png" alt="演示"><br>显示已连接即为成功。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Aria2 </tag>
            
            <tag> Linux </tag>
            
            <tag> Rclone </tag>
            
            <tag> AriaNG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图种</title>
      <link href="/2023/07/02/%E5%9B%BE%E7%A7%8D/"/>
      <url>/2023/07/02/%E5%9B%BE%E7%A7%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="图种"><a href="#图种" class="headerlink" title="图种"></a>图种</h1><p>图种是一种利用图片文件来传递压缩包的技巧。图种以图像浏览器开启时，就是一张单纯的图片。但可以以压缩软件对其解压缩，获取附加在图片档后的压缩包内容。</p><p>虽然图种携带的是压缩包，而压缩内可以是任意的文件。但文件增大，图种的大小也会跟着增大；引人怀疑。所以通常图种中夹带的压缩包内容仅为一种子文件，供人下载某其它文件。故称为图种。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="类unix操作系统"><a href="#类unix操作系统" class="headerlink" title="类unix操作系统"></a>类unix操作系统</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> 压缩文件.zip &gt;&gt; 图片文件.jpg </span><br><span class="line">    <span class="comment"># 方法一：</span></span><br><span class="line">    <span class="comment"># 將 压缩文档.zip 的內容写入到 图片文件.jpg 后。</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> 图片文件.jpg 压缩文件.zip &gt; 图种.jpg</span><br><span class="line">    <span class="comment"># 方法二：</span></span><br><span class="line">    <span class="comment"># 依序將 压缩文档.jpg , 压缩文件.zip 的內容写入到 图种.jpg 內。</span></span><br></pre></td></tr></table></figure><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h3 id="DOS或命令行"><a href="#DOS或命令行" class="headerlink" title="DOS或命令行"></a>DOS或命令行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy /b 图片文件.jpg + 压缩文件.rar 图种.jpg</span><br></pre></td></tr></table></figure><h3 id="图形端"><a href="#图形端" class="headerlink" title="图形端"></a>图形端</h3><p>将图片的扩展名改为rar。此时双击开启改变文件名的图片文件会出现错误。<br>将压缩包拖曵到上步骤改变扩展名的图片文件上。<br>按住压缩包。<br>将压缩包拉到图片文件上。<br>放开压缩包。<br>改名后的图片文件成为图种。此时双击图种可以开启，看到的内容为原来的压缩包。<br>将图种的扩展名更改为jpg。（或图片原来的扩展名。）此时双击图种可以开启，看到的内容为原来的图片。</p><h1 id="解图"><a href="#解图" class="headerlink" title="解图"></a>解图</h1><p>接收方要想获取图种中隐藏的文件，只需要更改后缀名为压缩文件（rar、zip、7z等）并解压即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 图种 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础操作</title>
      <link href="/2023/07/02/Linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/02/Linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：本篇基于CentOS,部分指令并不通用！！！！</p></blockquote><h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027214128.png" alt="image-20221027214128453"></p><ul><li><code>/</code>，根目录是最顶级的目录了</li><li>Linux只有一个顶级目录：<code>/</code></li><li>路径描述的层次关系同样适用<code>/</code>来表示</li><li>&#x2F;home&#x2F;itheima&#x2F;a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li></ul><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul><li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li><li>-l，以列表形式查看</li><li>-h，配合-l，以更加人性化的方式显示文件大小</li><li>-a，显示隐藏文件</li></ul><h3 id="隐藏文件、文件夹"><a href="#隐藏文件、文件夹" class="headerlink" title="隐藏文件、文件夹"></a>隐藏文件、文件夹</h3><p>在Linux中以<code>.</code>开头的，均是隐藏的。</p><p>默认不显示出来，需要<code>-a</code>选项才可查看到。</p><h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>功能：展示当前工作目录</p><p>语法：<code>pwd</code></p><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><h2 id="HOME目录"><a href="#HOME目录" class="headerlink" title="HOME目录"></a>HOME目录</h2><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul><li><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h2><ul><li><p>相对路径，&#x3D;&#x3D;非&#x3D;&#x3D;<code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li><p>绝对路径，&#x3D;&#x3D;以&#x3D;&#x3D;<code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p></li></ul><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li><code>.</code>，表示当前，比如.&#x2F;a.txt，表示当前文件夹内的<code>a.txt</code>文件</li><li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li><li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>功能：创建文件夹</p><p>语法：<code>mkdir [-p] 参数</code></p><ul><li>参数：被创建文件夹的路径</li><li>选项：-p，可选，表示创建前置路径</li></ul><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul><li>参数：被创建的文件路径</li></ul><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul><li>参数：被查看的文件路径</li></ul><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul><li>参数：被查看的文件路径</li><li>在查看过程中：<ul><li><code>空格</code>键翻页</li><li><code>q</code>退出查看</li></ul></li></ul><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>参数1，被复制的</li><li>参数2，要复制去的地方</li><li>选项：-r，可选，复制文件夹使用</li></ul><p>示例：</p><ul><li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li><li>cp a.txt test&#x2F;，复制当前目录a.txt到test文件夹内</li><li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li></ul><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1：被移动的</li><li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li></ul><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul><li>参数：支持多个，每一个表示被删除的，空格进行分隔</li><li>选项：-r，删除文件夹使用</li><li>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul><li>参数：被查看的命令</li></ul><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>功能：搜索文件</p><p>语法1按文件名搜索：<code>find 路径 -name 参数</code></p><ul><li>路径，搜索的起始路径</li><li>参数，搜索的关键字，支持通配符*， 比如：<code>*</code>test表示搜索任意以test结尾的文件</li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h2 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h2><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h2><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul><li>参数：被输出的内容</li></ul><h2 id="96-反引号"><a href="#96-反引号" class="headerlink" title="&#96;反引号"></a>&#96;反引号</h2><p>功能：被两个反引号包围的内容，会作为命令执行</p><p>示例：</p><ul><li>echo `pwd`，会输出当前工作目录</li></ul><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-f，持续跟踪文件修改</li></ul><h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-n，查看的行数</li></ul><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul><li><code>&gt;</code>，表示覆盖输出</li><li><code>&gt;&gt;</code>，表示追加输出</li></ul><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215841.png" alt="image-20221027215841573"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215846.png" alt="image-20221027215846581"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png" alt="image-20221027215849668"></p><h3 id="底线命令快捷键"><a href="#底线命令快捷键" class="headerlink" title="底线命令快捷键"></a>底线命令快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215858.png" alt="image-20221027215858967"></p><h2 id="命令的选项"><a href="#命令的选项" class="headerlink" title="命令的选项"></a>命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220005.png" alt="image-20221027220005610"></p><h3 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220010.png" alt="image-20221027220009949"></p><h1 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>CentOS系统使用：<ul><li>yum [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li><li>Ubuntu系统使用<ul><li>apt [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul><li>start，启动</li><li>stop，停止</li><li>status，查看状态</li><li>disable，关闭开机自启</li><li>enable，开启开机自启</li><li>restart，重启</li></ul><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>参数1：被链接的</li><li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年%y   年份后两位数字 (00..99)</li><li>%m   月份 (01..12)</li><li>%d   日 (01..31)</li><li>%H   小时 (00..23)</li><li>%M   分钟 (00..59)</li><li>%S   秒 (00..60)</li><li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul><li><p>按照2022-01-01的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220514.png" alt="image-20221027220514640"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220525.png" alt="image-20221027220525625"></p></li><li><p>-d选项日期计算</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220429.png" alt="image-20221027220429831"></p><ul><li><p>支持的时间标记为：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220449.png" alt="image-20221027220449312"></p></li></ul></li></ul><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>修改时区为中国时区</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220554.png" alt="image-20221027220554654"></p><h2 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h2><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>格式：a.b.c.d</p><ul><li>abcd为0~255的数字</li></ul><p>特殊IP：</p><ul><li>127.0.0.1，表示本机</li><li>0.0.0.0<ul><li>可以表示本机</li><li>也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h2 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h2><ol><li><p>修改VMware网络，参阅PPT，图太多</p></li><li><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>功能：查看进程信息</p><p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p><h2 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221303.png" alt="image-20221027221303037"></p><h2 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221241.png" alt="image-20221027221241123"></p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221129.png" alt="image-20221027221129782"></p><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221149.png" alt="image-20221027221148964"></p><h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221201.png" alt="image-20221027221201079"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221210.png" alt="image-20221027221210518"></p><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p>可用选项：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221340.png" alt="image-20221027221340729"></p><p>交互式模式中，可用快捷键：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221354.png" alt="image-20221027221354137"></p><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><p>查看磁盘占用</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221413.png" alt="image-20221027221413787"></p><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><p>查看CPU、磁盘的相关信息</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221440.png" alt="image-20221027221439990"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221514.png" alt="image-20221027221514237"></p><h2 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h2><p>查看网络统计</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221545.png" alt="image-20221027221545822"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>临时设置：export 变量名&#x3D;变量值</li><li>永久设置：<ul><li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li>针对全局，设置<code>/etc/profile</code></li></ul></li></ul><h3 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><h2 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul><li>-z表示使用gzip，可以不写</li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221906.png" alt="image-20221027221906247"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul><li>-z表示使用gzip，可以省略</li><li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li></ul><p><code>unzip [-d] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221939.png" alt="image-20221027221939899"></p><h2 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h2><p>切换用户</p><p>语法：<code>su [-] [用户]</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222021.png" alt="image-20221027222021619"></p><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222035.png" alt="image-20221027222035337"></p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itheima ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p><h2 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h2><p>修改文件、文件夹权限</p><p>语法：<code>chmod [-R] 权限 参数</code></p><ul><li><p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222157.png" alt="image-20221027222157276"></p></li><li><p>参数，被修改的文件、文件夹</p></li><li><p>选项-R，设置文件夹和其内部全部内容一样生效</p></li></ul><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><p>修改文件、文件夹所属用户、组</p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222326.png" alt="image-20221027222326192"></p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222354.png" alt="image-20221027222354498"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222407.png" alt="image-20221027222407618"></p><h2 id="genenv命令"><a href="#genenv命令" class="headerlink" title="genenv命令"></a>genenv命令</h2><ul><li><p><code>getenv group</code>，查看系统全部的用户组</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222446.png" alt="image-20221027222446514"></p></li><li><p><code>getenv passwd</code>，查看系统全部的用户</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222512.png" alt="image-20221027222512274"></p></li></ul><h2 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h2><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown使用</title>
      <link href="/2023/07/02/Markdown%E7%94%A8%E6%B3%95/"/>
      <url>/2023/07/02/Markdown%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档.</p><p>Markdown 语言在2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 .md , .markdown</p><p><a href="https://kjimg10.360buyimg.com/ott/jfs/t20250701/217548/22/34077/183099/64a0dbecF69bc1def/86691c2de3c7fdc1.png"><img src="https://kjimg10.360buyimg.com/ott/jfs/t20250701/217548/22/34077/183099/64a0dbecF69bc1def/86691c2de3c7fdc1.png" alt="1688263651579.png"></a></p><p>Markdown文档具有广泛的用途，以下是一些常见的应用场景：</p><p>编写文档和笔记：Markdown提供了一种简单、轻量级的文本格式，使得编写和组织文档和笔记变得简单而高效。它不会分散注意力于样式和排版，而是专注于内容本身。</p><p>创建博客和网页：许多博客平台和网站支持Markdown语法，因此您可以使用Markdown来编写和发布博客文章或网页内容。Markdown的简洁性和易读性使其成为发布在线内容的理想选择。</p><p>撰写电子邮件和消息：在电子邮件、聊天应用或论坛中，您可以使用Markdown来格式化和排版您的消息。它可以帮助您创建更易读和清晰的内容，包括列表、链接、引用等。</p><p>编写技术文档和文档注释：对于开发人员和技术作者来说，Markdown是一种流行的格式选择。它可以用于编写代码文档、API文档、README文件以及各种注释，使得文档的编写和维护更加方便。</p><p>制作演示文稿：使用支持Markdown的演示文稿工具，如Remark、Reveal.js等，您可以创建漂亮的幻灯片演示。Markdown的结构化方式使得创建幻灯片变得简单，并且可以轻松添加代码块、图像和链接等。</p><p>生成静态网站：通过将Markdown文件与静态网站生成器（如Jekyll、Hugo、Gatsby等）结合使用，您可以将Markdown文档转换为美观、可导航的静态网站。这对于个人博客、文档站点或项目文档非常有用。</p><p>总的来说，Markdown是一种简单、易读且易于学习的标记语言，广泛应用于编写各种类型的文档和内容。它使得内容创作更加专注于思想表达和内容组织，而不必过多关注样式和排版。无论您是在编写个人笔记、发布博客文章还是撰写技术文档，Markdown都是一种强大而方便的工具。</p><h2 id="1-Markdown教程"><a href="#1-Markdown教程" class="headerlink" title="1. Markdown教程"></a>1. Markdown教程</h2><p>Markdown是一种简单、易读且易于学习的标记语言，广泛应用于编写各种类型的文档和内容。它使得内容创作更加专注于思想表达和内容组织，而不必过多关注样式和排版。</p><h2 id="2-Markdown标题"><a href="#2-Markdown标题" class="headerlink" title="2. Markdown标题"></a>2. Markdown标题</h2><p>使用 <code>#</code> 符号来表示标题。Markdown支持六级标题，一个 <code>#</code> 表示一级标题，以此类推。标题可以帮助组织文档结构，使其更具可读性和清晰性。</p><h2 id="3-Markdown段落格式"><a href="#3-Markdown段落格式" class="headerlink" title="3. Markdown段落格式"></a>3. Markdown段落格式</h2><p>段落之间使用空行进行分隔。Markdown支持斜体、加粗、删除线等文本样式。</p><ul><li><em>斜体文本</em>：使用单个星号或下划线包围文本。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*</span><br></pre></td></tr></table></figure><ul><li><strong>加粗文本</strong>：使用双星号或双下划线包围文本。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**加粗文本**</span><br></pre></td></tr></table></figure><ul><li><del>删除线文本</del>：使用两个波浪线包围文本。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线文本~~</span><br></pre></td></tr></table></figure><h2 id="4-Markdown列表"><a href="#4-Markdown列表" class="headerlink" title="4. Markdown列表"></a>4. Markdown列表</h2><p>列表可以帮助组织和呈现信息。Markdown支持无序列表和有序列表。</p><ul><li>无序列表使用短横线（-）、加号（+）或星号（*）作为标记，每个项目前面加一个空格。</li><li>有序列表使用数字后面的点作为标记，每个项目前面加一个空格。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">## 无序列表</span><br><span class="line"></span><br><span class="line">- 项目1</span><br><span class="line">- 项目2</span><br><span class="line">- 项目3</span><br><span class="line"></span><br><span class="line">## 有序列表</span><br><span class="line"></span><br><span class="line">1. 项目1</span><br><span class="line">2. 项目2</span><br><span class="line">3. 项目3</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>项目1</li><li>项目2</li><li>项目3</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><h2 id="5-Markdown区块"><a href="#5-Markdown区块" class="headerlink" title="5. Markdown区块"></a>5. Markdown区块</h2><p>引用区块可以用来引用他人的文本、插入注释或提供引用资料。使用大于号（&gt;）表示引用他人的文本。</p><blockquote><p>这是一个引用区块的示例。</p></blockquote><h2 id="6-Markdown代码"><a href="#6-Markdown代码" class="headerlink" title="6. Markdown代码"></a>6. Markdown代码</h2><p>插入代码可以帮助展示代码片段、命令或其他计算机代码。使用反引号（&#96;）包围单行代码，或使用三个反引号包围多行代码块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="7-Markdown链接"><a href="#7-Markdown链接" class="headerlink" title="7. Markdown链接"></a>7. Markdown链接</h2><p>插入链接可以连接到其他网页、文档或资源。使用方括号表示链接文本，紧跟着使用圆括号表示链接地址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[点击这里查看更多Markdown教程](https://www.example.com/markdown-tutorials)</span><br></pre></td></tr></table></figure><h2 id="8-Markdown图片"><a href="#8-Markdown图片" class="headerlink" title="8. Markdown图片"></a>8. Markdown图片</h2><p>插入图片可以使文档更具可视化效果。使用感叹号和方括号来插入图片，方括号内是图片的替代文本，紧跟着方括号使用圆括号表示图片的URL或文件路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![示例图片](https://www.example.com/images/example.jpg)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![示例图片](https://kjimg10.360buyimg.com/ott/jfs/t20250630/200479/16/38269/131035/649f5d61F00f75afd/02b2f3ef2546de6c.png)</span><br></pre></td></tr></table></figure><p><img src="https://kjimg10.360buyimg.com/ott/jfs/t20250630/200479/16/38269/131035/649f5d61F00f75afd/02b2f3ef2546de6c.png" alt="示例图片"></p><h2 id="9-Markdown表格"><a href="#9-Markdown表格" class="headerlink" title="9. Markdown表格"></a>9. Markdown表格</h2><p>表格可以用来以表格形式展示数据和信息。使用竖线（|）和连字符（-）定义表头和表格内容的列数来创建表格。</p><table><thead><tr><th>列1标题</th><th>列2标题</th><th>列3标题</th></tr></thead><tbody><tr><td>内容1</td><td>内容2</td><td>内容3</td></tr><tr><td>内容4</td><td>内容5</td><td>内容6</td></tr></tbody></table><h2 id="10-Markdown高级技巧"><a href="#10-Markdown高级技巧" class="headerlink" title="10. Markdown高级技巧"></a>10. Markdown高级技巧</h2><p>Markdown还支持一些高级技巧，如：</p><ul><li>使用脚注来添加注释内容。</li><li>使用两个波浪线（~~）包围文本以显示删除线。</li><li>使用LaTeX语法来插入数学公式。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2023/06/29/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2023/06/29/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h1><h2 id="DDL数据库操作"><a href="#DDL数据库操作" class="headerlink" title="DDL数据库操作"></a>DDL数据库操作</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><blockquote><p>查询所有数据库</p></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br><span class="line"></span><br><span class="line">查询当前数据库</span><br><span class="line"></span><br><span class="line">``````mysql</span><br><span class="line">SELECT DATABASE();</span><br><span class="line"></span><br><span class="line">### 创建</span><br><span class="line"></span><br><span class="line">``````mysql</span><br><span class="line">CREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集] [COLLATE 排序规则];</span><br></pre></td></tr></table></figure><p>IF NOT EXISTS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">CRETE DATABASE IF NOT EXISTS 数据库名 DEFAULT CHARSET UTF8M4B;</span><br><span class="line"></span><br><span class="line">### 删除</span><br><span class="line"></span><br><span class="line">``````mysql</span><br><span class="line">DROP DATABASE [IF EXISTS] 数据库名;</span><br><span class="line"></span><br><span class="line">### 使用</span><br><span class="line"></span><br><span class="line">``````mysql</span><br><span class="line">USE 数据库名;</span><br><span class="line"></span><br><span class="line">## DDL-表操作</span><br><span class="line"></span><br><span class="line">###  查询</span><br><span class="line"></span><br><span class="line">查询当前数据库所有表</span><br><span class="line"></span><br><span class="line">``````mysql</span><br><span class="line">SHOW TABALES;</span><br></pre></td></tr></table></figure><p>查询表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC 表名;</span><br></pre></td></tr></table></figure><p>查询指定表的建表语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE 表名;</span><br><span class="line"></span><br><span class="line">### 创建</span><br><span class="line"></span><br><span class="line">```mysql</span><br><span class="line">CREATE TABLE 表名(</span><br><span class="line">字段1 字段1类型 [COMMENT 字段1注释]</span><br><span class="line">字段2 字段2类型 [COMMENT 字段2注释]</span><br><span class="line">字段3 字段3类型 [COMMENT 字段3注释]</span><br><span class="line">)[COMMENT 表注释];</span><br></pre></td></tr></table></figure></blockquote><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p><strong>数值类型</strong></p></blockquote><blockquote><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">有符号(SIGNED)范围</th><th align="left">无符号(UNSUGNED)范围</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1byte</td><td align="left">(-128,127)</td><td align="left">(0,255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2bytes</td><td align="left">(-32768，32767)</td><td align="left">(0，65535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3bytes</td><td align="left">(-8388608,8388607)</td><td align="left">(0,16777215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT&#x2F;INTEGER</td><td align="left">4bytes</td><td align="left">(-2147483648,214748364</td><td align="left">(0,429496729</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8bytes</td><td align="left">(-2^63，2^63-1)</td><td align="left">(0，2^64-1</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4bytes</td><td align="left">(-3.402823466 E+38，3.402823466351 E+38</td><td align="left">0 和 (1.175494351 E-38，3.402823466 E+38</td><td align="left">单精度浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8bytes</td><td align="left">(-1.7976931348623157E+308，1.7976931348623157E+308)</td><td align="left">0 和(2.2250738585072014E-308，1.7976931348623157E+308)</td><td align="left">双精度浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left"></td><td align="left">依赖于M(精度)和D(标度)的值</td><td align="left">依赖于M(精度)和D(标度)的值</td><td align="left">小数值(精确定点数)</td></tr></tbody></table></blockquote><blockquote><p><strong>字符串类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>描述</th></tr></thead><tbody><tr><td>CHAR</td><td>0-255 bytes</td><td>定长字符串(需要指定长度)</td></tr><tr><td>VARCHAR</td><td>0-65535 bytes</td><td>变长字符串(需要指定长度)</td></tr><tr><td>TINYBLOB</td><td>0-255 bytes</td><td>不超过255个字符的二进制数据</td></tr><tr><td>TINYTEXT</td><td>0-255 bytes</td><td>短文本字符串</td></tr><tr><td>BLOB</td><td>0-65535 bytes</td><td>二进制形式的长文本数据</td></tr><tr><td>TEXT</td><td>0-65535 bytes</td><td>长文本数据</td></tr><tr><td>MEDIUMBLOB</td><td>0-16777215 bytes</td><td>二进制形式的中等长度文本数据</td></tr><tr><td>MEDIUMTEXT</td><td>0-4294967295 bytes</td><td>二进制形式的极大文本数据</td></tr><tr><td>LONGTEXT</td><td>0-4294967295 bytes</td><td>极大文本数据</td></tr></tbody></table></blockquote><blockquote><p><strong>日期时间类型</strong></p><table><thead><tr><th>类型</th><th>大小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>DATE</td><td>3</td><td>1000-01-01 至 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>TIME</td><td>3</td><td>-838:59:59 至 838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至9999-12-31 23:59:59</td><td>YYYY-MM-DD<br> HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至2038-01-19 03:14:07</td><td>YYYY-MM-DD<br>HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
